---
- name: Install and configure ScyllaDB for Tablets testing
  hosts: scylla
  become: yes
  gather_facts: yes  # Ensure fact gathering is enabled
  vars:
    scylla_version: "6.0"
    device_path: "/dev/nvme0n1"  # Device path for IO setup
    scylla_setup_marker: "/etc/scylla_setup_done"  # Path to marker file
    scylla_config: "/etc/scylla/scylla.yaml"  # Path to ScyllaDB config file
    scylla_backup: "/etc/scylla/scylla.yaml.bak"  # Path to ScyllaDB backup config file
    ansible_python_interpreter: /usr/bin/python3

  tasks:
    - name: Install dependencies
      apt:
        name:
          - curl
        state: present
        update_cache: yes

    - name: Install ScyllaDB
      shell: curl -sSf get.scylladb.com/server | sudo bash -s -- --scylla-version {{ scylla_version }}

    - name: Determine first node
      set_fact:
        first_node: "{{ groups['scylla'][0] }}"

    - name: Check if scylla_setup was already done
      stat:
        path: "{{ scylla_setup_marker }}"
      register: scylla_setup_done

    - name: Run scylla_setup on all nodes
      shell: sudo scylla_setup --disks {{ device_path }} --online-discard 1 --nic {{ ansible_default_ipv4.interface }} --io-setup 1 --no-fstrim-setup --no-coredump-setup
      when: not scylla_setup_done.stat.exists

    - name: Create scylla_setup marker file
      file:
        path: "{{ scylla_setup_marker }}"
        state: touch
      when: not scylla_setup_done.stat.exists

    - name: Stop ScyllaDB server if running
      service:
        name: scylla-server
        state: stopped
        enabled: yes

    - name: Check if scylla.yaml exists
      stat:
        path: "{{ scylla_config }}"
      register: scylla_config_exists

    - name: Print message if scylla.yaml exists
      debug:
        msg: "The scylla.yaml file exists at {{ scylla_config }}."
      when: scylla_config_exists.stat.exists

    - name: Check if scylla.yaml backup exists
      stat:
        path: "{{ scylla_backup }}"
      register: scylla_backup_exists

    - name: Restore scylla.yaml from backup if it exists
      copy:
        src: "{{ scylla_backup }}"
        dest: "{{ scylla_config }}"
        remote_src: yes
      when: scylla_backup_exists.stat.exists

    - name: Backup scylla.yaml
      copy:
        src: "{{ scylla_config }}"
        dest: "{{ scylla_backup }}"
        remote_src: yes
        backup: yes

    - name: Update listen_address in scylla.yaml
      lineinfile:
        path: /etc/scylla/scylla.yaml
        regexp: '^listen_address:.*'
        line: "listen_address: {{ inventory_hostname }}"

    - name: Update rpc_address in scylla.yaml
      lineinfile:
        path: /etc/scylla/scylla.yaml
        regexp: '^rpc_address:.*'
        line: "rpc_address: {{ inventory_hostname }}"

    - name: Update broadcast_address in scylla.yaml
      lineinfile:
        path: /etc/scylla/scylla.yaml
        regexp: '^# broadcast_address:.*'
        line: "broadcast_address: {{ inventory_hostname }}"

    - name: Update broadcast_rpc_address in scylla.yaml
      lineinfile:
        path: /etc/scylla/scylla.yaml
        regexp: '^# broadcast_rpc_address:.*'
        line: "broadcast_rpc_address: {{ inventory_hostname }}"

    - name: Update seeds in scylla.yaml
      lineinfile:
        path: /etc/scylla/scylla.yaml
        regexp: '^\s*- seeds:.*'
        line: "          - seeds: {{ first_node }}"

    - name: Start the first ScyllaDB node
      service:
        name: scylla-server
        state: started
      when: inventory_hostname == first_node

    - name: Wait for ScyllaDB to be ready on the first node
      wait_for:
        host: "{{ first_node }}"
        port: 9042
        state: started
        timeout: 300
      when: inventory_hostname == first_node

    - name: Start ScyllaDB on non-first nodes
      service:
        name: scylla-server
        state: started
      when: inventory_hostname != first_node